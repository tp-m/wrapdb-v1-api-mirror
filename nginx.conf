server {
  location = / {
    return 301 https://mesonbuild.com/Wrapdb-projects.html;
  }

  location /v2 {
    rewrite ^.*/v2/releases.json https://raw.githubusercontent.com/mesonbuild/wrapdb/master/releases.json permanent;
    rewrite ^.*/v2/([^/]+)/get_patch https://github.com/mesonbuild/wrapdb/releases/download/$1/$1_patch.zip permanent;
    rewrite ^.*/v2/([^/]+)/([^/]+).wrap https://github.com/mesonbuild/wrapdb/releases/download/$1/$2.wrap permanent;
  }

  # Redirect legacy v1 patch URLs.
  # FIXME: This breaks download of sqlite that has not been imported to v2 because it is replaced by sqlite3
  #location ~ get_zip$ {
  #  rewrite ^.*/v1/projects/([^/]+)/([^/]+)/([^/]+)/get_zip https://github.com/mesonbuild/wrapdb/releases/download/$1_$2-$3/$1_$2-$3_patch.zip permanent;
  #}

  # tpm: for testing migration to static v1 content (2 Nov 2024)
  # temporary; toggle x1 -> v1 once ready
  location /x1/ {

    # v1 project list redirect
    location = /x1/projects {
      return 301 https://wrapdb.mesonbuild.com/v1-static/-/projects;
    }

    # v1 project info redirect
    location /x1/projects/ {
      rewrite ^.*/x1/projects/([^/]+)$ https://wrapdb.mesonbuild.com/v1-static/projects/-/$1 permanent;
    }

    # v1 get_latest redirect to static mirror
    location /x1/query/get_latest/ {
      rewrite ^.*/x1/query/get_latest/([^/]+)$ https://wrapdb.mesonbuild.com/v1-static/query/get_latest/-/$1 permanent;
    }

    # v1 get_wrap redirect to static mirror
    location ~ /x1/projects/[^/]+/[^/]+/[^/]+/get_wrap$ {
      rewrite ^.*/x1/projects/([^/]+)/([^/]+)/([^/]+)/get_wrap$ https://wrapdb.mesonbuild.com/v1-static/projects/$1/$2/$3/-/get_wrap permanent;
      #rewrite ^.*/x1/projects/([^/]+)/([^/]+)/([^/]+)/get_wrap$ https://wrapdb.mesonbuild.com/v1-static/projects/$1/$2/$3/$1-$2-$3.wrap permanent;
    }

    # v1 get_zip redirect to static mirror
    location ~ /x1/projects/[^/]+/[^/]+/[^/]+/get_zip$ {
      rewrite ^.*/x1/projects/([^/]+)/([^/]+)/([^/]+)/get_zip$ https://wrapdb.mesonbuild.com/v1-static/projects/$1/$2/$3/-/get_zip permanent;
      #rewrite ^.*/x1/projects/([^/]+)/([^/]+)/([^/]+)/get_zip$ https://wrapdb.mesonbuild.com/v1-static/projects/$1/$2/$3/$1-$2-$3-wrap.zip permanent;
    }
  }

  # Decorate static files with the right content type
  location /v1-static/ {
    root /var/www/;

    # v1 project list (json)
    location = /v1-static/-/projects {
      types { }
      default_type application/json;
    }

    # v1 project info (json)
    location /v1-static/projects/-/ {
      types { }
      default_type application/json;
    }

    # v1 project latest version (json)
    location /v1-static/query/get_latest/ {
      types { }
      default_type application/json;
    }

    # v1 get_wrap (text)
    location ~ /v1-static/projects/[^/]+/[^/]+/[^/]+/-/get_wrap$ {
      types { }
      default_type "text/plain; charset=utf-8";
    }

    # v1 wrap file full name alias (text) (bonus addition, not part of the original v1 api)
    location ~ /v1-static/projects/[^/]+/[^/]+/[^/]+/[^/]+.wrap$ {
      types { }
      default_type "text/plain; charset=utf-8";
    }

    # v1 get_zip (zip)
    location ~ /v1-static/projects/[^/]+/[^/]+/[^/]+/-/get_zip$ {
      types { }
      default_type application/zip;
      if ( $request_filename ~ "^.*/projects/([^/]+)/([^/]+)/([^/]+)/-/get_zip$" ){
            set $fname $1-$2-$3-wrap.zip;
            add_header Content-Disposition 'attachment; filename=$fname';
        }
    }

    # v1 zip file full name alias (zip) (bonus addition, not part of the original v1 api)
    location ~ /v1-static/projects/[^/]+/[^/]+/[^/]+/[^/]+.zip$ {
      types { }
      default_type application/zip;
    }
  }

  location / {
    try_files $uri @uwsgi;
  }

  location /static {
    root /home/legeana/wrapweb/wrapweb/;
  }

  location @uwsgi {
    include uwsgi_params;
    uwsgi_pass uwsgi;
  }

  server_name wrapdb.mesonbuild.com;

  listen [::]:443 ssl ipv6only=on; # managed by Certbot
  listen 443 ssl; # managed by Certbot
  ssl_certificate /etc/letsencrypt/live/wrapdb.mesonbuild.com/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/wrapdb.mesonbuild.com/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
  server_name wrapdb.mesonbuild.com;
  listen 80;
  listen [::]:80;

  # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
  return 301 https://$host$request_uri;
}
